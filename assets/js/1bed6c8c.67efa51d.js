"use strict";(self.webpackChunkp8g_docs=self.webpackChunkp8g_docs||[]).push([[6158],{7847:function(e,r,i){i.r(r),i.d(r,{assets:function(){return w},contentTitle:function(){return s},default:function(){return _},frontMatter:function(){return d},metadata:function(){return k},toc:function(){return u}});var n=i(3117),t=i(102),o=(i(7294),i(3905)),a=i(5488),l=i(5162),c=i(6975),f=i(4678),p=["components"],d={description:"C | Java"},s="Fireworks",k={unversionedId:"fireworks",id:"fireworks",title:"Fireworks",description:"C | Java",source:"@site/examples/fireworks.md",sourceDirName:".",slug:"/fireworks",permalink:"/p8g/examples/fireworks",draft:!1,editUrl:"https://github.com/bernhardfritz/p8g/edit/master/docs/examples/fireworks.md",tags:[],version:"current",frontMatter:{description:"C | Java"},sidebar:"examples",previous:{title:"A* search algorithm",permalink:"/p8g/examples/astar"},next:{title:"Flappy Bird",permalink:"/p8g/examples/flappy-bird"}},w={},u=[],m={toc:u};function _(e){var r=e.components,i=(0,t.Z)(e,p);return(0,o.kt)("wrapper",(0,n.Z)({},m,i,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fireworks"},"Fireworks"),(0,o.kt)(f.Z,{src:"/examples/fireworks.html",mdxType:"Emscripten"}),(0,o.kt)(a.Z,{groupId:"lang",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,o.kt)(c.Z,{language:"c",title:"firework.c",mdxType:"CodeBlock"},'#include "firework.h"\n\n#include "stb_ds.h"\n#define USING_NAMESPACE_P8G\n#include "p8g.h"\n\nvoid firework_apply_force(firework_t* firework, vec2 force) {\n    if (firework->exploded == 0) {\n        particle_t* rocket = &firework->rocket;\n        particle_apply_force(rocket, force);\n    } else {\n        for (int i = 0; i < arrlen(firework->particles); i++) {\n            particle_t* particle = &firework->particles[i];\n            particle_apply_force(particle, force);\n        }\n    }\n}\n\nvoid firework_update(firework_t* firework) {\n    if (firework->exploded == 0) {\n        particle_t* rocket = &firework->rocket;\n        particle_update(rocket);\n        if (rocket->velocity[1] >= 0.f) {\n            firework_explode(firework);\n        }\n    } else {\n        for (int i = 0; i < arrlen(firework->particles); i++) {\n            particle_t* particle = &firework->particles[i];\n            vec2_scale(particle->velocity, particle->velocity, 0.95f);\n            particle_update(particle);\n        }\n        for (int i = arrlen(firework->particles) - 1; i >= 0; i--) {\n            particle_t* particle = &firework->particles[i];\n            if (particle_is_dead(particle)) {\n                arrdel(firework->particles, i);\n            }\n        }\n    }\n}\n\nvoid firework_explode(firework_t* firework) {\n    vec4 color = { random(255.f), random(255.f), random(255.f), 255.f };\n    for (int i = 0; i < 200; i++) {\n        float angle = random(2.f * M_PI);\n        float magnitude = random(2.f, 10.f);\n        particle_t particle = {\n            .position = { firework->rocket.position[0], firework->rocket.position[1] },\n            .mass = random(0.7f, 1.f),\n            .velocity = { magnitude * cosf(angle), magnitude * sinf(angle) },\n            .lifespan = random(90.f, 110.f),\n            .color = { color[0], color[1], color[2], color[3] },\n        };\n        arrpush(firework->particles, particle);\n    }\n    firework->exploded = 1;\n}\n\nvoid firework_draw(firework_t* firework) {\n    noStroke();\n    if (firework->exploded == 0) {\n        particle_t* rocket = &firework->rocket;\n        particle_draw(rocket);\n    } else {\n        for (int i = 0; i < arrlen(firework->particles); i++) {\n            particle_t* particle = &firework->particles[i];\n            particle_draw(particle);\n        }\n    }\n}\n\nint firework_is_done(firework_t* firework) {\n    return firework->exploded == 1 && arrlen(firework->particles) == 0\n        ? 1\n        : 0;\n}\n\nvoid firework_destroy(firework_t* firework) {\n    arrfree(firework->particles);\n}'),(0,o.kt)(c.Z,{language:"c",title:"firework.h",mdxType:"CodeBlock"},'#ifndef FIREWORK_H\n#define FIREWORK_H\n\n#include "linmath.h"\n\n#include "particle.h"\n\ntypedef struct {\n    particle_t rocket;\n    int exploded;\n    particle_t* particles;\n} firework_t;\n\nvoid firework_apply_force(firework_t* firework, vec2 force);\nvoid firework_update(firework_t* firework);\nvoid firework_explode(firework_t* firework);\nvoid firework_draw(firework_t* firework);\nint firework_is_done(firework_t* firework);\nvoid firework_destroy(firework_t* firework);\n\n#endif /* FIREWORK_H */'),(0,o.kt)(c.Z,{language:"c",title:"fireworks.c",mdxType:"CodeBlock"},'#define STB_DS_IMPLEMENTATION\n#include "stb_ds.h"\n#define USING_NAMESPACE_P8G\n#include "p8g.h"\n\n#include "firework.h"\n\nfirework_t* fireworks = NULL;\nvec2 gravity = { 0.f, 0.2f };\n\nvoid draw() {\n    background(0.f, 0.f, 0.f, 25.5f);\n    if (random() < 0.1f) {\n        firework_t firework = {\n            .rocket = {\n                .position = { random(width), height },\n                .velocity = { 0.f, random(-10.f, -12.f) },\n                .color = { 255.f, 0.f, 0.f, 255.f },\n                .mass = 1.f,\n                .lifespan = -1,\n            },\n            .exploded = 0,\n            .particles = NULL,\n        };\n        arrpush(fireworks, firework);\n    }\n    for (int i = 0; i < arrlen(fireworks); i++) {\n        firework_t* firework = &fireworks[i];\n        firework_apply_force(firework, gravity);\n        firework_update(firework);\n        firework_draw(firework);\n    }\n    for (int i = arrlen(fireworks) - 1; i >= 0; i--) {\n        firework_t* firework = &fireworks[i];\n        if (firework_is_done(firework)) {\n            firework_destroy(firework);\n            arrdel(fireworks, i);\n        }\n    }\n}\n\nint main(void) {\n    run(512, 512, "Fireworks");\n    for (int i = 0; i < arrlen(fireworks); i++) {\n        firework_t* firework = &fireworks[i];\n        firework_destroy(firework);\n    }\n    arrfree(fireworks);\n    return 0;\n}'),(0,o.kt)(c.Z,{language:"c",title:"particle.c",mdxType:"CodeBlock"},'#include "particle.h"\n\n#define USING_NAMESPACE_P8G\n#include "p8g.h"\n\nvoid particle_apply_force(particle_t* particle, vec2 force) {\n    vec2 da;\n    vec2_scale(da, force, particle->mass);\n    vec2_add(particle->acceleration, particle->acceleration, da);\n}\n\nvoid particle_update(particle_t* particle) {\n    vec2 deltaVelocity;\n    vec2_scale(deltaVelocity, particle->acceleration, deltaTime / 19.f);\n    vec2_add(particle->velocity, particle->velocity, deltaVelocity);\n    vec2 deltaPosition;\n    vec2_scale(deltaPosition, particle->velocity, deltaTime / 19.f);\n    vec2_add(particle->position, particle->position, deltaPosition);\n    particle->acceleration[0] = 0.f;\n    particle->acceleration[1] = 0.f;\n    if (particle->age < particle->lifespan) {\n        particle->age = particle->age + 1;\n    }\n}\n\nvoid particle_draw(particle_t* particle) {\n    if (particle->lifespan == -1) {\n        fill(particle->color);\n    } else {\n        float pct = 1.f - particle->age / (float) particle->lifespan;\n        fill(particle->color[0], particle->color[1], particle->color[2], pct * particle->color[3]);\n    }\n    ellipse(particle->position[0], particle->position[1], particle->mass * 8.f, particle->mass * 8.f);\n}\n\nint particle_is_dead(particle_t* particle) {\n    return particle->age == particle->lifespan;\n}'),(0,o.kt)(c.Z,{language:"c",title:"particle.h",mdxType:"CodeBlock"},'#ifndef PARTICLE_H\n#define PARTICLE_H\n\n#include "linmath.h"\n\ntypedef struct {\n    vec2 position;\n    vec2 velocity;\n    vec2 acceleration;\n    int age;\n    int lifespan;\n    float mass;\n    vec4 color;\n} particle_t;\n\nvoid particle_apply_force(particle_t* particle, vec2 force);\nvoid particle_update(particle_t* particle);\nvoid particle_draw(particle_t* particle);\nint particle_is_dead(particle_t* particle);\n\n#endif /* PARTICLE_H */')),(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(c.Z,{language:"java",title:"Firework.java",mdxType:"CodeBlock"},"import org.joml.Vector2f;\nimport org.joml.Vector4f;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static io.github.bernhardfritz.p8g.Sketch.*;\n\npublic class Firework {\n\n    private Particle rocket;\n    boolean exploded;\n    private Set<Particle> particles;\n\n    public Firework(Particle rocket) {\n        this.rocket = rocket;\n        this.exploded = false;\n        this.particles = new HashSet<>();\n    }\n\n    public void applyForce(Vector2f force) {\n        if (!exploded) {\n            rocket.applyForce(force);\n        } else {\n            for (Particle particle : particles) {\n                particle.applyForce(force);\n            }\n        }\n    }\n\n    public void update() {\n        if (!exploded) {\n            rocket.update();\n            if (rocket.getVelocity().get(1) >= 0.f) {\n                explode();\n            }\n        } else {\n            for (Particle particle : particles) {\n                particle.getVelocity().mul(0.95f);\n                particle.update();\n            }\n            particles.removeIf(Particle::isDead);\n        }\n    }\n\n    public void explode() {\n        Vector4f color = new Vector4f(random(255.f), random(255.f), random(255.f), 255.f);\n        for (int i = 0; i < 200; i++) {\n            float angle = random(2.f * (float) Math.PI);\n            float magnitude = random(2.f, 10.f);\n            Particle particle = new Particle(\n                    new Vector2f(rocket.getPosition()),\n                    random(0.7f, 1.f),\n                    new Vector2f(magnitude * (float) Math.cos(angle), magnitude * (float) Math.sin(angle)),\n                    (int) random(90.f, 110.f),\n                    color\n            );\n            particles.add(particle);\n        }\n        exploded = true;\n    }\n\n    public void draw() {\n        noStroke();\n        if (!exploded) {\n            rocket.draw();\n        } else {\n            for (Particle particle : particles) {\n                particle.draw();\n            }\n        }\n    }\n\n    public boolean isDone() {\n        return exploded && particles.isEmpty();\n    }\n\n}\n"),(0,o.kt)(c.Z,{language:"java",title:"Fireworks.java",mdxType:"CodeBlock"},'import io.github.bernhardfritz.p8g.Sketch;\nimport org.joml.Vector2f;\nimport org.joml.Vector4f;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Fireworks extends Sketch {\n\n    Set<Firework> fireworks = new HashSet<>();\n    Vector2f gravity = new Vector2f(0.f, 0.2f);\n\n    @Override\n    public void draw() {\n        background(new float[] { 0.f, 0.f, 0.f, 25.5f});\n        if (random() < 0.1f) {\n            Firework firework = new Firework(\n              new Particle(\n                      new Vector2f(random(width), height),\n                      1.f,\n                      new Vector2f(0.f, random(-10.f, -12.f)),\n                      -1,\n                      new Vector4f(255.f, 0.f, 0.f, 255.f)\n              )\n            );\n            fireworks.add(firework);\n        }\n        for (Firework firework : fireworks) {\n            firework.applyForce(gravity);\n            firework.update();\n            firework.draw();\n        }\n        fireworks.removeIf(Firework::isDone);\n    }\n\n    public static void main(String[] args) {\n        Sketch sketch = new Fireworks();\n        sketch.run(512, 512, "Fireworks");\n    }\n}\n'),(0,o.kt)(c.Z,{language:"java",title:"Particle.java",mdxType:"CodeBlock"},"import org.joml.Vector2f;\nimport org.joml.Vector4f;\n\nimport static io.github.bernhardfritz.p8g.Sketch.*;\n\npublic class Particle {\n\n    private Vector2f position;\n    private Vector2f velocity;\n    private Vector2f acceleration;\n    private int age;\n    private int lifespan;\n    private float mass;\n    private Vector4f color;\n\n    public Particle(Vector2f position, float mass, Vector2f velocity, int lifespan, Vector4f color) {\n        this.position = position;\n        this.mass = mass;\n        this.velocity = velocity;\n        this.lifespan = lifespan;\n        this.color = color;\n        this.acceleration = new Vector2f();\n        this.age = 0;\n    }\n\n    public void applyForce(Vector2f force) {\n        Vector2f da = new Vector2f();\n        force.mul(mass, da);\n        acceleration.add(da);\n    }\n\n    public void update() {\n        Vector2f deltaVelocity = new Vector2f();\n        acceleration.mul(deltaTime / 19.f, deltaVelocity);\n        velocity.add(deltaVelocity);\n        Vector2f deltaPosition = new Vector2f();\n        velocity.mul(deltaTime / 19.f, deltaPosition);\n        position.add(deltaPosition);\n        acceleration.set(0.f , 0.f);\n        if (age < lifespan) {\n            age = age + 1;\n        }\n    }\n\n    public void draw() {\n        if (lifespan == -1) {\n            fill(color.get(0), color.get(1), color.get(2), color.get(3));\n        } else {\n            float pct = 1.f - age / (float) lifespan;\n            fill(color.get(0), color.get(1), color.get(2), pct * 255.f);\n        }\n        ellipse(position.get(0), position.get(1), mass * 8.f, mass * 8.f);\n    }\n\n    public boolean isDead() {\n        return age == lifespan;\n    }\n\n    public Vector2f getPosition() {\n        return position;\n    }\n\n    public Vector2f getVelocity() {\n        return velocity;\n    }\n}\n"))))}_.isMDXComponent=!0},4678:function(e,r,i){i.d(r,{Z:function(){return a}});var n=i(7294),t=i(6649),o=i(4996);function a(e){return n.createElement(t.Z,{src:(0,o.Z)(e.src),style:{width:"1px",minWidth:"100%"}})}}}]);