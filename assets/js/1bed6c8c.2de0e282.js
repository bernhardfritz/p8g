"use strict";(self.webpackChunkp8g_docs=self.webpackChunkp8g_docs||[]).push([[6158],{7511:function(e,n,r){r.r(n),r.d(n,{assets:function(){return k},contentTitle:function(){return d},default:function(){return v},frontMatter:function(){return f},metadata:function(){return u},toc:function(){return w}});var i=r(3117),t=r(102),o=(r(7294),r(3905)),a=r(5488),l=r(5162),c=r(6975),s=r(4678),p=["components"],f={description:"C | Java | JavaScript"},d="Fireworks",u={unversionedId:"fireworks",id:"fireworks",title:"Fireworks",description:"C | Java | JavaScript",source:"@site/examples/fireworks.md",sourceDirName:".",slug:"/fireworks",permalink:"/p8g/examples/fireworks",draft:!1,editUrl:"https://github.com/bernhardfritz/p8g/edit/master/docs/examples/fireworks.md",tags:[],version:"current",frontMatter:{description:"C | Java | JavaScript"},sidebar:"examples",previous:{title:"A* search algorithm",permalink:"/p8g/examples/astar"},next:{title:"Flappy Bird",permalink:"/p8g/examples/flappy-bird"}},k={},w=[],m={toc:w};function v(e){var n=e.components,r=(0,t.Z)(e,p);return(0,o.kt)("wrapper",(0,i.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fireworks"},"Fireworks"),(0,o.kt)(s.Z,{src:"/examples/fireworks.html",mdxType:"Emscripten"}),(0,o.kt)(a.Z,{groupId:"lang",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,o.kt)(c.Z,{language:"c",title:"firework.c",mdxType:"CodeBlock"},'#include "firework.h"\n\n#include "stb_ds.h"\n#define USING_NAMESPACE_P8G\n#include "p8g.h"\n\nvoid firework_apply_force(firework_t* firework, vec2 force) {\n    if (firework->exploded == 0) {\n        particle_t* rocket = &firework->rocket;\n        particle_apply_force(rocket, force);\n    } else {\n        for (int i = 0; i < arrlen(firework->particles); i++) {\n            particle_t* particle = &firework->particles[i];\n            particle_apply_force(particle, force);\n        }\n    }\n}\n\nvoid firework_update(firework_t* firework) {\n    if (firework->exploded == 0) {\n        particle_t* rocket = &firework->rocket;\n        particle_update(rocket);\n        if (rocket->velocity[1] >= 0.f) {\n            firework_explode(firework);\n        }\n    } else {\n        for (int i = 0; i < arrlen(firework->particles); i++) {\n            particle_t* particle = &firework->particles[i];\n            vec2_scale(particle->velocity, particle->velocity, 0.95f);\n            particle_update(particle);\n        }\n        for (int i = arrlen(firework->particles) - 1; i >= 0; i--) {\n            particle_t* particle = &firework->particles[i];\n            if (particle_is_dead(particle)) {\n                arrdel(firework->particles, i);\n            }\n        }\n    }\n}\n\nvoid firework_explode(firework_t* firework) {\n    vec4 color = { random(255.f), random(255.f), random(255.f), 255.f };\n    for (int i = 0; i < 200; i++) {\n        float angle = random(2.f * M_PI);\n        float magnitude = random(7.f);\n        particle_t particle = {\n            .position = { firework->rocket.position[0], firework->rocket.position[1] },\n            .mass = random(0.7f, 1.f),\n            .velocity = { magnitude * cosf(angle), magnitude * sinf(angle) },\n            .lifespan = random(90.f, 110.f),\n            .color = { color[0], color[1], color[2], color[3] },\n        };\n        arrpush(firework->particles, particle);\n    }\n    firework->exploded = 1;\n}\n\nvoid firework_draw(firework_t* firework) {\n    noStroke();\n    if (firework->exploded == 0) {\n        particle_t* rocket = &firework->rocket;\n        particle_draw(rocket);\n    } else {\n        for (int i = 0; i < arrlen(firework->particles); i++) {\n            particle_t* particle = &firework->particles[i];\n            particle_draw(particle);\n        }\n    }\n}\n\nint firework_is_done(firework_t* firework) {\n    return firework->exploded == 1 && arrlen(firework->particles) == 0\n        ? 1\n        : 0;\n}\n\nvoid firework_destroy(firework_t* firework) {\n    arrfree(firework->particles);\n}'),(0,o.kt)(c.Z,{language:"c",title:"firework.h",mdxType:"CodeBlock"},'#ifndef FIREWORK_H\n#define FIREWORK_H\n\n#include "linmath.h"\n\n#include "particle.h"\n\ntypedef struct {\n    particle_t rocket;\n    int exploded;\n    particle_t* particles;\n} firework_t;\n\nvoid firework_apply_force(firework_t* firework, vec2 force);\nvoid firework_update(firework_t* firework);\nvoid firework_explode(firework_t* firework);\nvoid firework_draw(firework_t* firework);\nint firework_is_done(firework_t* firework);\nvoid firework_destroy(firework_t* firework);\n\n#endif /* FIREWORK_H */'),(0,o.kt)(c.Z,{language:"c",title:"fireworks.c",mdxType:"CodeBlock"},'#define STB_DS_IMPLEMENTATION\n#include "stb_ds.h"\n#define USING_NAMESPACE_P8G\n#include "p8g.h"\n\n#include "firework.h"\n\nfirework_t* fireworks = NULL;\nvec2 gravity = { 0.f, 0.2f };\n\nvoid draw() {\n    background(0.f, 0.f, 0.f, 25.5f);\n    if (random() < 0.1f) {\n        firework_t firework = {\n            .rocket = {\n                .position = { random(width), height },\n                .velocity = { 0.f, random(-9.f, -10.f) },\n                .color = { 255.f, 0.f, 0.f, 255.f },\n                .mass = 1.f,\n                .lifespan = -1,\n            },\n            .exploded = 0,\n            .particles = NULL,\n        };\n        arrpush(fireworks, firework);\n    }\n    for (int i = 0; i < arrlen(fireworks); i++) {\n        firework_t* firework = &fireworks[i];\n        firework_apply_force(firework, gravity);\n        firework_update(firework);\n        firework_draw(firework);\n    }\n    for (int i = arrlen(fireworks) - 1; i >= 0; i--) {\n        firework_t* firework = &fireworks[i];\n        if (firework_is_done(firework)) {\n            firework_destroy(firework);\n            arrdel(fireworks, i);\n        }\n    }\n}\n\nvoid keyPressed() {}\nvoid keyReleased() {}\nvoid mouseMoved() {}\nvoid mousePressed() {}\nvoid mouseReleased() {}\nvoid mouseWheel(float delta) {}\n\nint main(void) {\n    run(320, 320, "Fireworks");\n    for (int i = 0; i < arrlen(fireworks); i++) {\n        firework_t* firework = &fireworks[i];\n        firework_destroy(firework);\n    }\n    arrfree(fireworks);\n    return 0;\n}'),(0,o.kt)(c.Z,{language:"c",title:"particle.c",mdxType:"CodeBlock"},'#include "particle.h"\n\n#define USING_NAMESPACE_P8G\n#include "p8g.h"\n\nvoid particle_apply_force(particle_t* particle, vec2 force) {\n    vec2 da;\n    vec2_scale(da, force, particle->mass);\n    vec2_add(particle->acceleration, particle->acceleration, da);\n}\n\nvoid particle_update(particle_t* particle) {\n    vec2 deltaVelocity;\n    vec2_scale(deltaVelocity, particle->acceleration, deltaTime / 19.f);\n    vec2_add(particle->velocity, particle->velocity, deltaVelocity);\n    vec2 deltaPosition;\n    vec2_scale(deltaPosition, particle->velocity, deltaTime / 19.f);\n    vec2_add(particle->position, particle->position, deltaPosition);\n    particle->acceleration[0] = 0.f;\n    particle->acceleration[1] = 0.f;\n    if (particle->age < particle->lifespan) {\n        particle->age = particle->age + 1;\n    }\n}\n\nvoid particle_draw(particle_t* particle) {\n    if (particle->lifespan == -1) {\n        fill(particle->color);\n    } else {\n        float pct = 1.f - particle->age / (float) particle->lifespan;\n        fill(particle->color[0], particle->color[1], particle->color[2], pct * particle->color[3]);\n    }\n    ellipse(particle->position[0], particle->position[1], particle->mass * 8.f, particle->mass * 8.f);\n}\n\nint particle_is_dead(particle_t* particle) {\n    return particle->age == particle->lifespan;\n}'),(0,o.kt)(c.Z,{language:"c",title:"particle.h",mdxType:"CodeBlock"},'#ifndef PARTICLE_H\n#define PARTICLE_H\n\n#include "linmath.h"\n\ntypedef struct {\n    vec2 position;\n    vec2 velocity;\n    vec2 acceleration;\n    int age;\n    int lifespan;\n    float mass;\n    vec4 color;\n} particle_t;\n\nvoid particle_apply_force(particle_t* particle, vec2 force);\nvoid particle_update(particle_t* particle);\nvoid particle_draw(particle_t* particle);\nint particle_is_dead(particle_t* particle);\n\n#endif /* PARTICLE_H */')),(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(c.Z,{language:"java",title:"Firework.java",mdxType:"CodeBlock"},"import org.joml.Vector2f;\nimport org.joml.Vector4f;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static io.github.bernhardfritz.p8g.Sketch.*;\n\npublic class Firework {\n\n    private Particle rocket;\n    boolean exploded;\n    private Set<Particle> particles;\n\n    public Firework(Particle rocket) {\n        this.rocket = rocket;\n        this.exploded = false;\n        this.particles = new HashSet<>();\n    }\n\n    public void applyForce(Vector2f force) {\n        if (!exploded) {\n            rocket.applyForce(force);\n        } else {\n            for (Particle particle : particles) {\n                particle.applyForce(force);\n            }\n        }\n    }\n\n    public void update() {\n        if (!exploded) {\n            rocket.update();\n            if (rocket.getVelocity().get(1) >= 0.f) {\n                explode();\n            }\n        } else {\n            for (Particle particle : particles) {\n                particle.getVelocity().mul(0.95f);\n                particle.update();\n            }\n            particles.removeIf(Particle::isDead);\n        }\n    }\n\n    public void explode() {\n        Vector4f color = new Vector4f(random(255.f), random(255.f), random(255.f), 255.f);\n        for (int i = 0; i < 200; i++) {\n            float angle = random(2.f * (float) Math.PI);\n            float magnitude = random(7.f);\n            Particle particle = new Particle(\n                    new Vector2f(rocket.getPosition()),\n                    random(0.7f, 1.f),\n                    new Vector2f(magnitude * (float) Math.cos(angle), magnitude * (float) Math.sin(angle)),\n                    (int) random(90.f, 110.f),\n                    color\n            );\n            particles.add(particle);\n        }\n        exploded = true;\n    }\n\n    public void draw() {\n        noStroke();\n        if (!exploded) {\n            rocket.draw();\n        } else {\n            for (Particle particle : particles) {\n                particle.draw();\n            }\n        }\n    }\n\n    public boolean isDone() {\n        return exploded && particles.isEmpty();\n    }\n\n}\n"),(0,o.kt)(c.Z,{language:"java",title:"Fireworks.java",mdxType:"CodeBlock"},'import io.github.bernhardfritz.p8g.Sketch;\nimport org.joml.Vector2f;\nimport org.joml.Vector4f;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Fireworks extends Sketch {\n\n    Set<Firework> fireworks = new HashSet<>();\n    Vector2f gravity = new Vector2f(0.f, 0.2f);\n\n    @Override\n    public void draw() {\n        background(new float[] { 0.f, 0.f, 0.f, 25.5f});\n        if (random() < 0.1f) {\n            Firework firework = new Firework(\n              new Particle(\n                      new Vector2f(random(width), height),\n                      1.f,\n                      new Vector2f(0.f, random(-9.f, -10.f)),\n                      -1,\n                      new Vector4f(255.f, 0.f, 0.f, 255.f)\n              )\n            );\n            fireworks.add(firework);\n        }\n        for (Firework firework : fireworks) {\n            firework.applyForce(gravity);\n            firework.update();\n            firework.draw();\n        }\n        fireworks.removeIf(Firework::isDone);\n    }\n\n    public static void main(String[] args) {\n        Sketch sketch = new Fireworks();\n        sketch.run(320, 320, "Fireworks");\n    }\n}\n'),(0,o.kt)(c.Z,{language:"java",title:"Particle.java",mdxType:"CodeBlock"},"import org.joml.Vector2f;\nimport org.joml.Vector4f;\n\nimport static io.github.bernhardfritz.p8g.Sketch.*;\n\npublic class Particle {\n\n    private Vector2f position;\n    private Vector2f velocity;\n    private Vector2f acceleration;\n    private int age;\n    private int lifespan;\n    private float mass;\n    private Vector4f color;\n\n    public Particle(Vector2f position, float mass, Vector2f velocity, int lifespan, Vector4f color) {\n        this.position = position;\n        this.mass = mass;\n        this.velocity = velocity;\n        this.lifespan = lifespan;\n        this.color = color;\n        this.acceleration = new Vector2f();\n        this.age = 0;\n    }\n\n    public void applyForce(Vector2f force) {\n        Vector2f da = new Vector2f();\n        force.mul(mass, da);\n        acceleration.add(da);\n    }\n\n    public void update() {\n        Vector2f deltaVelocity = new Vector2f();\n        acceleration.mul(deltaTime / 19.f, deltaVelocity);\n        velocity.add(deltaVelocity);\n        Vector2f deltaPosition = new Vector2f();\n        velocity.mul(deltaTime / 19.f, deltaPosition);\n        position.add(deltaPosition);\n        acceleration.set(0.f , 0.f);\n        if (age < lifespan) {\n            age = age + 1;\n        }\n    }\n\n    public void draw() {\n        if (lifespan == -1) {\n            fill(color.get(0), color.get(1), color.get(2), color.get(3));\n        } else {\n            float pct = 1.f - age / (float) lifespan;\n            fill(color.get(0), color.get(1), color.get(2), pct * 255.f);\n        }\n        ellipse(position.get(0), position.get(1), mass * 8.f, mass * 8.f);\n    }\n\n    public boolean isDead() {\n        return age == lifespan;\n    }\n\n    public Vector2f getPosition() {\n        return position;\n    }\n\n    public Vector2f getVelocity() {\n        return velocity;\n    }\n}\n")),(0,o.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)(c.Z,{language:"js",title:"firework.js",mdxType:"CodeBlock"},"import { noStroke, random } from 'p8g.js';\nimport Victor from 'victor';\nimport Particle from './particle';\n\nexport default class Firework {\n  constructor(rocket) {\n    this._rocket = rocket;\n    this._exploded = false;\n    this._particles = [];\n  }\n\n  applyForce(force) {\n    if (!this._exploded) {\n      this._rocket.applyForce(force);\n    } else {\n      for (const particle of this._particles) {\n        particle.applyForce(force);\n      }\n    }\n  }\n\n  update() {\n    if (!this._exploded) {\n      this._rocket.update();\n      if (this._rocket.velocity.y >= 0) {\n        this.explode();\n      }\n    } else {\n      for (const particle of this._particles) {\n        particle.velocity.multiply(new Victor(0.95, 0.95));\n        particle.update();\n      }\n      let index = -1;\n      while (\n        (index = this._particles.findIndex((particle) => particle.isDead())) !==\n        -1\n      ) {\n        this._particles.splice(index, 1);\n      }\n    }\n  }\n\n  explode() {\n    const color = [random(255), random(255), random(255), 255];\n    for (let i = 0; i < 200; i++) {\n      const angle = random(2 * Math.PI);\n      const magnitude = random(7);\n      const particle = new Particle(\n        this._rocket.position.clone(),\n        random(0.7, 1),\n        new Victor(magnitude * Math.cos(angle), magnitude * Math.sin(angle)),\n        Math.floor(random(90, 110)),\n        color,\n      );\n      this._particles.push(particle);\n    }\n    this._exploded = true;\n  }\n\n  draw() {\n    noStroke();\n    if (!this._exploded) {\n      this._rocket.draw();\n    } else {\n      for (const particle of this._particles) {\n        particle.draw();\n      }\n    }\n  }\n\n  isDone() {\n    return this._exploded && this._particles.length === 0;\n  }\n}\n"),(0,o.kt)(c.Z,{language:"js",title:"fireworks.js",mdxType:"CodeBlock"},"import p8g, { background, createCanvas, height, random, width } from 'p8g.js';\nimport Victor from 'victor';\nimport Firework from './firework';\nimport Particle from './particle';\n\nlet fireworks = [];\nconst gravity = new Victor(0, 0.2);\n\np8g.draw = () => {\n  background([0, 0, 0, 25.5]);\n  if (random() < 0.1) {\n    const firework = new Firework(\n      new Particle(\n        new Victor(random(width), height),\n        1,\n        new Victor(0, random(-9, -10)),\n        -1,\n        [255, 0, 0, 255],\n      ),\n    );\n    fireworks.push(firework);\n  }\n  for (const firework of fireworks) {\n    firework.applyForce(gravity);\n    firework.update();\n    firework.draw();\n  }\n  let index = -1;\n  while (\n    (index = fireworks.findIndex((firework) => firework.isDone())) !== -1\n  ) {\n    fireworks.splice(index, 1);\n  }\n};\n\nconst canvasWrapper = document.getElementById('canvas-wrapper');\nconst canvas = createCanvas(320, 320);\ncanvasWrapper.appendChild(canvas);\n"),(0,o.kt)(c.Z,{language:"html",title:"index.html",mdxType:"CodeBlock"},'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Fireworks</title>\n    <style>\n      #canvas-wrapper {\n        display: inline-flex;\n        background: black;\n      }\n    </style>\n  </head>\n  <body>\n    <div id="canvas-wrapper">\n      \x3c!-- canvas will go here --\x3e\n    </div>\n    <script type="module" src="fireworks.js"><\/script>\n  </body>\n</html>'),(0,o.kt)(c.Z,{language:"js",title:"particle.js",mdxType:"CodeBlock"},"import { deltaTime, ellipse, fill } from 'p8g.js';\nimport Victor from 'victor';\n\nexport default class Particle {\n  constructor(position, mass, velocity, lifespan, color) {\n    this._position = position;\n    this._mass = mass;\n    this._velocity = velocity;\n    this._lifespan = lifespan;\n    this._color = color;\n    this._acceleration = new Victor(0, 0);\n    this._age = 0;\n  }\n\n  applyForce(force) {\n    const da = force.clone().multiply(new Victor(this._mass, this._mass));\n    this._acceleration.add(da);\n  }\n\n  update() {\n    const deltaVelocity = this._acceleration\n      .clone()\n      .multiply(new Victor(deltaTime / 19, deltaTime / 19));\n    this.velocity.add(deltaVelocity);\n    const deltaPosition = this.velocity\n      .clone()\n      .multiply(new Victor(deltaTime / 19, deltaTime / 19));\n    this.position.add(deltaPosition);\n    this._acceleration.x = 0;\n    this._acceleration.y = 0;\n    if (this._age < this._lifespan) {\n      this._age = this._age + 1;\n    }\n  }\n\n  draw() {\n    if (this._lifespan === -1) {\n      fill(this._color);\n    } else {\n      const pct = 1 - this._age / this._lifespan;\n      fill(this._color[0], this._color[1], this._color[2], pct * 255);\n    }\n    ellipse(this._position.x, this._position.y, this._mass * 8, this._mass * 8);\n  }\n\n  isDead() {\n    return this._age === this._lifespan;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  get velocity() {\n    return this._velocity;\n  }\n\n  set velocity(velocity) {\n    this._velocity = velocity;\n  }\n}\n"))))}v.isMDXComponent=!0},5162:function(e,n,r){r.d(n,{Z:function(){return a}});var i=r(7294),t=r(6010),o="tabItem_Ymn6";function a(e){var n=e.children,r=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",className:(0,t.Z)(o,a),hidden:r},n)}},5488:function(e,n,r){r.d(n,{Z:function(){return u}});var i=r(3117),t=r(7294),o=r(6010),a=r(2389),l=r(7392),c=r(7094),s=r(2466),p="tabList__CuJ",f="tabItem_LNqP";function d(e){var n,r,a=e.lazy,d=e.block,u=e.defaultValue,k=e.values,w=e.groupId,m=e.className,v=t.Children.map(e.children,(function(e){if((0,t.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=k?k:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),_=(0,l.l)(h,(function(e,n){return e.value===n.value}));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===u?u:null!=(n=null!=u?u:null==(r=v.find((function(e){return e.props.default})))?void 0:r.props.value)?n:v[0].props.value;if(null!==g&&!h.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,c.U)(),b=y.tabGroupChoices,x=y.setTabGroupChoices,V=(0,t.useState)(g),T=V[0],P=V[1],F=[],C=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=w){var S=b[w];null!=S&&S!==T&&h.some((function(e){return e.value===S}))&&P(S)}var E=function(e){var n=e.currentTarget,r=F.indexOf(n),i=h[r].value;i!==T&&(C(n),P(i),null!=w&&x(w,String(i)))},I=function(e){var n,r=null;switch(e.key){case"ArrowRight":var i,t=F.indexOf(e.currentTarget)+1;r=null!=(i=F[t])?i:F[0];break;case"ArrowLeft":var o,a=F.indexOf(e.currentTarget)-1;r=null!=(o=F[a])?o:F[F.length-1]}null==(n=r)||n.focus()};return t.createElement("div",{className:(0,o.Z)("tabs-container",p)},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},m)},h.map((function(e){var n=e.value,r=e.label,a=e.attributes;return t.createElement("li",(0,i.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return F.push(e)},onKeyDown:I,onFocus:E,onClick:E},a,{className:(0,o.Z)("tabs__item",f,null==a?void 0:a.className,{"tabs__item--active":T===n})}),null!=r?r:n)}))),a?(0,t.cloneElement)(v.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):t.createElement("div",{className:"margin-top--md"},v.map((function(e,n){return(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function u(e){var n=(0,a.Z)();return t.createElement(d,(0,i.Z)({key:String(n)},e))}},4678:function(e,n,r){r.d(n,{Z:function(){return a}});var i=r(7294),t=r(6649),o=r(4996);function a(e){return i.createElement(t.Z,{src:(0,o.Z)(e.src),style:{width:"1px",minWidth:"100%"}})}}}]);